plugins {
    id 'java'
    id 'com.gradleup.shadow' version '9.0.2'
    id 'maven-publish'
}

group = 'dev.kaepsis.cachedeconomy'
version = 'SPIGOT-RELEASE-1.2'
description = "cached-economy"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven { url = 'https://repo.william278.net/releases' }
    maven { url = "https://jitpack.io" }
    maven { url = "https://repo.aikar.co/content/groups/aikar/" }
    maven { url = 'https://repo.extendedclip.com/releases/' }
}

dependencies {
    implementation 'com.github.NaTorOG:SimpleConfig:1.0.6'
    compileOnly 'org.spigotmc:spigot-api:1.21.8-R0.1-SNAPSHOT'
    implementation "co.aikar:acf-paper:0.5.1-SNAPSHOT"
    compileOnly "com.github.kaepsis:VaultAPI:ennamo"
    implementation "com.github.kaepsis:kutils:v1.9.6.5"
    compileOnly 'me.clip:placeholderapi:2.11.6'
    implementation 'com.zaxxer:HikariCP:7.0.0'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked']
}

processResources {
    def props = [version: version]
    inputs.properties props
    filesMatching('plugin.yml') {
        filteringCharset = 'UTF-8'
        expand props
    }
}

shadowJar {
    minimize()
    mergeServiceFiles()
    archiveFileName = "${project.description}-${project.version}.jar"

    relocate('co.aikar.commands', "${project.group}.libs.acf")
    relocate('co.aikar.locales', "${project.group}.libs.locales")
    relocate('com.zaxxer.hikari', "${project.group}.libs.hikari")

    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
    exclude 'LICENSE*'
    exclude 'NOTICE*'
}

jar.enabled = false
assemble.dependsOn shadowJar

afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version

                artifact shadowJar

                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    configurations.compileClasspath.allDependencies.each { dep ->
                        if (dep.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                            dependencyNode.appendNode('scope', 'provided')
                        }
                    }
                }
            }
        }
    }
}